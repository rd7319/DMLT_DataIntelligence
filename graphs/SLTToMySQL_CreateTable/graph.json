{
    "properties": {},
    "description": "SLTToMySQL_CreateTable",
    "processes": {
        "wiretap1": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 181,
                "y": 12,
                "height": 80,
                "width": 120,
                "generation": 1,
                "ui": "dynpath",
                "config": {
                    "maxSize": 10000000000000
                }
            }
        },
        "sltconnector1": {
            "component": "com.sap.abap.slt.reader",
            "metadata": {
                "label": "SLT Connector V2",
                "x": 12,
                "y": 12,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {
                    "connectionID": "CAL_ECC",
                    "operatorID": "com.sap.abap.slt.reader.v2",
                    "subscriptionType": "New",
                    "action": "Initial Load",
                    "massTransferID": "001",
                    "tableName": "IMRG",
                    "subscriptionName": "IMRG_002"
                },
                "additionaloutports": [
                    {
                        "name": "outMessageData",
                        "type": "message"
                    }
                ]
            }
        },
        "python3operator1": {
            "component": "InitializeMySQL",
            "metadata": {
                "label": "Initialize My SQL Table",
                "x": 350,
                "y": 12,
                "height": 80,
                "width": 120,
                "extensible": true,
                "filesRequired": [
                    "script.py"
                ],
                "generation": 1,
                "config": {
                    "script": "import json\ndef data_type(kind,abaptype,length,abaplen,decimals):\n    if kind == 'C' or kind == 'N':\n        return f'VARCHAR({length})'\n    elif kind == 'I' or kind == 's':\n        return abaptype\n    elif kind == 'D':\n        return 'DATE'\n    elif kind == 'F':\n        return f'DOUBLE({abaplen},{decimals})'\n    elif kind == 'P':\n        return f'DECIMAL({abaplen},{decimals})'\n    elif kind == 'T':\n        return 'TIME'\n    else:\n        return 'VARCHAR({length})'\n\ndef KEY_NULL_CHECK(KEY_FLAG,NULL_FLAG):\n    if KEY_FLAG == 'X' or  NULL_FLAG == 'X':\n        return 'NOT NULL'\n    else:\n      return ''\n\ndef PRIMARY_KEY_CHECK(FIELD_NAME,KEY_FLAG):\n    if KEY_FLAG == 'X':\n        return FIELD_NAME + ','\n    else:\n      return ''\n      \ndef get_db_cursor(connProp):\n    #Connect to DB\n    mydb = mysql.connector.connect(\n          host= connProp['host'],\n          port=connProp['port'],  \n          user=connProp['user'],\n          database=connProp['database'],\n          password=connProp['password']\n        )\n    #Get DB Cursor  \n    return mydb,mydb.cursor()\n\n    \ndef execute(mydb,cursor,stmt):\n    api.logger.info(\"entered execute\")\n    #Commit to DB\n    try:\n        cursor.execute(stmt)\n        mydb.commit()\n        result = f\"Table Created\"\n    except mysql.connector.IntegrityError as e:\n        api.logger.info(\"exception\")\n        result = 'Failure'\n        api.logger.info(e)\n        api.propagate_exception(e)\n    except mysql.connector.errors.DatabaseError as d:    \n        api.logger.info(\"exception\")\n        result = 'Failure'\n        api.logger.info(d)\n        api.propagate_exception(d)\n        \n    api.logger.info(result)\n    return result    \n\ndef on_input(message):\n    var = json.dumps(message.attributes) \n    A = json.loads(var)\n    \n    #Read Operator Config\n    connProp = api.config.Connection['connectionProperties']\n    tableName = str(api.config.Table)    \n    \n    #Get Connection and Cursor\n    mydb,cursor = get_db_cursor(connProp)    \n    \n    if A.get('message.batchIndex') > 1:\n        api.send(\"out\",message)\n    else:    \n        abaptypelist = A.get(\"metadata\")\n        dtypelist = A.get(\"ABAP\").get(\"Fields\")\n            \n        abtyplist = [i for i in abaptypelist if not (i.get('Field').get('ABAPTYPE') == '')]\n        \n        Field_Name_Append = ''\n        Primary_Key_Append = ''\n        for i,data in enumerate(abtyplist):\n            #print(data.get('Field').get('COLUMNNAME') == dtypelist[i].get('Name'))\n            data1 = data.get('Field')\n            data2 = dtypelist[i]\n            Field_Name_Append = Field_Name_Append + data1.get(\"COLUMNNAME\") + ' ' +  data_type(data2.get('Kind'),data1.get('ABAPTYPE'),int(data1.get('OUTPUTLEN')),int(data1.get('ABAPLEN')), int(data1.get('DECIMALS'))) + ' ' + KEY_NULL_CHECK(data1.get(\"KEY\"),data1.get(\"NULLABLE\")) + ','\n            Primary_Key_Append = Primary_Key_Append + PRIMARY_KEY_CHECK(data1.get(\"COLUMNNAME\"),data1.get(\"KEY\"))\n            \n        SQL_Code = 'CREATE TABLE IF NOT EXISTS ' + tableName +  '(' + Field_Name_Append + 'PRIMARY KEY (' + Primary_Key_Append[:-1]+'));'\n        result = execute(mydb,cursor,SQL_Code)\n        api.send(\"out\",message)\n\napi.set_port_callback(\"input1\", on_input)"
                }
            }
        },
        "wiretap2": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 519,
                "y": 12,
                "height": 80,
                "width": 120,
                "generation": 1,
                "ui": "dynpath",
                "config": {}
            }
        },
        "flowagentsqlexecutor1": {
            "component": "com.sap.dh.ds.sql.executor",
            "metadata": {
                "label": "Flowagent SQL Executor",
                "x": 688,
                "y": 12,
                "height": 80,
                "width": 120,
                "extensible": false,
                "generation": 1,
                "config": {
                    "service": "MySQL",
                    "mysqlConnection": {
                        "configurationType": "Configuration Manager",
                        "connectionID": "AURORA_DB"
                    }
                }
            }
        }
    },
    "groups": [],
    "connections": [
        {
            "metadata": {
                "points": "474,52 514,52"
            },
            "src": {
                "port": "out",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap2"
            }
        },
        {
            "metadata": {
                "points": "305,52 345,52"
            },
            "src": {
                "port": "out",
                "process": "wiretap1"
            },
            "tgt": {
                "port": "input1",
                "process": "python3operator1"
            }
        },
        {
            "metadata": {
                "points": "136,52 176,52"
            },
            "src": {
                "port": "outMessageData",
                "process": "sltconnector1"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap1"
            }
        },
        {
            "metadata": {
                "points": "643,52 683,52"
            },
            "src": {
                "port": "out",
                "process": "wiretap2"
            },
            "tgt": {
                "port": "sql",
                "process": "flowagentsqlexecutor1"
            }
        }
    ],
    "inports": {},
    "outports": {},
    "metadata": {}
}