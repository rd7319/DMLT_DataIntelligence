{
    "properties": {},
    "description": "Download large table with headers into Data lake using CDS",
    "processes": {
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": 201.99999904632568,
                "y": 72,
                "height": 80,
                "width": 120,
                "extensible": true,
                "filesRequired": [
                    "script.py"
                ],
                "generation": 1,
                "config": {
                    "script": "## Custom code build in Base Python3 operator to append headers in csv file.\n## Author: Shristi Drolia\n##         Manish Kumar\n## Publish Date: \n## Version : 1.0\n# Import Python Libraries\nimport io\nfrom io import StringIO\nfrom io import BytesIO\nimport csv\nimport pandas as pd\nimport json\nimport numpy as np\nimport datetime\nimport time\nimport uuid\n\n\n# read data coming from SLT operator\ndef on_input(inData):\n\n    \n# read body    \n    data = StringIO(inData.body)\n# read attribute    \n    attr = inData.attributes\n    \n# columns extraction from json attributes    \n    ABAPKEY = attr['ABAP']\n\n# col variable to store column names\n    col= []\n    \n    lastBatch = attr.get('message.lastBatch')\n    \n    batchIndex = attr.get('message.batchIndex')\n\n# last batch determination \n    if lastBatch == True:\n        MSG = '1'\n    else:\n        MSG = '0'\n# sending stop signal once last batch is detected    \n    if(MSG == '1'):\n        api.send(\"stop\", \"stop\")\n        \n    else:    \n# preparing list of columns         \n        for columnname in ABAPKEY['Fields']:\n            col.append(columnname['Name'])\n# dataframe with columns and data            \n        if batchIndex == 0:\n            # dataframe with columns and data            \n            df = pd.read_csv(data, index_col=False, names=col, dtype = 'str')\n            df_csv = df.to_csv(index=False, header = True)\n        else:\n            # dataframe with columns and data            \n            df = pd.read_csv(data, index_col=False, dtype = 'str')\n            df_csv = df.to_csv(index=False)\n        \n\n# sending csv as output            \n        api.send(\"outMessage\", api.Message(attributes = attr, body=df_csv))\n# reading next batch of data             \napi.set_port_callback(\"inData\", on_input)"
                },
                "additionalinports": [
                    {
                        "name": "inData",
                        "type": "message"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "outMessage",
                        "type": "message"
                    },
                    {
                        "name": "stop",
                        "type": "message"
                    }
                ]
            }
        },
        "writefile1": {
            "component": "com.sap.file.write",
            "metadata": {
                "label": "Write File",
                "x": 567.999997138977,
                "y": 132,
                "height": 80,
                "width": 120,
                "generation": 1,
                "config": {
                    "mode": "Overwrite",
                    "pathMode": "Static (from configuration)",
                    "connection": {
                        "configurationType": "Connection Management",
                        "connectionID": "DI_DATA_LAKE"
                    },
                    "path": "/shared/Test%20DI_S4/CDS_SKB1.csv"
                }
            }
        },
        "tofile1": {
            "component": "com.sap.file.toFile",
            "metadata": {
                "label": "To File",
                "x": 419.49999809265137,
                "y": 27,
                "height": 50,
                "width": 50,
                "generation": 1,
                "config": {}
            }
        },
        "workflowterminator1": {
            "component": "com.sap.dh.terminator",
            "metadata": {
                "label": "Workflow Terminator",
                "x": 386.99999809265137,
                "y": 117,
                "height": 80,
                "width": 120,
                "generation": 1,
                "config": {}
            }
        },
        "wiretap1": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 17,
                "y": 132,
                "height": 80,
                "width": 120,
                "generation": 1,
                "ui": "dynpath",
                "config": {
                    "maxSize": 4096
                }
            }
        },
        "wiretap2": {
            "component": "com.sap.util.wiretap",
            "metadata": {
                "label": "Wiretap",
                "x": 567.999997138977,
                "y": 12,
                "height": 80,
                "width": 120,
                "generation": 1,
                "ui": "dynpath",
                "config": {}
            }
        },
        "abapcdsreader1": {
            "component": "com.sap.abap.cds.reader",
            "metadata": {
                "label": "ABAP CDS Reader V2",
                "x": -108.5,
                "y": -90,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {
                    "connectionID": "Project_Atlas_CFIN",
                    "operatorID": "com.sap.abap.cds.reader.v2",
                    "subscriptionType": "New",
                    "action": "Initial Load",
                    "chunkSize": 10000,
                    "subscriptionName": "CFIN_CDS_SKB1",
                    "cdsname": "ESH_N_GL_ACC_COCD_SKB1"
                },
                "additionaloutports": [
                    {
                        "name": "outMessageData",
                        "type": "message"
                    }
                ]
            }
        }
    },
    "groups": [],
    "connections": [
        {
            "metadata": {
                "points": "473.49999809265137,52 534.9999976158142,52 534.9999976158142,172 562.999997138977,172"
            },
            "src": {
                "port": "file",
                "process": "tofile1"
            },
            "tgt": {
                "port": "file",
                "process": "writefile1"
            }
        },
        {
            "metadata": {
                "points": "325.9999990463257,103 353.9999985694885,103 353.9999985694885,61 414.49999809265137,61"
            },
            "src": {
                "port": "outMessage",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "in",
                "process": "tofile1"
            }
        },
        {
            "metadata": {
                "points": "325.9999990463257,121 353.9999985694885,121 353.9999985694885,157 381.99999809265137,157"
            },
            "src": {
                "port": "stop",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "stop",
                "process": "workflowterminator1"
            }
        },
        {
            "metadata": {
                "points": "473.49999809265137,52 562.999997138977,52"
            },
            "src": {
                "port": "file",
                "process": "tofile1"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap2"
            }
        },
        {
            "metadata": {
                "points": "15.5,-50 65.5,-50 65.5,61 -38,61 -38,172 12,172"
            },
            "src": {
                "port": "outMessageData",
                "process": "abapcdsreader1"
            },
            "tgt": {
                "port": "in",
                "process": "wiretap1"
            }
        },
        {
            "metadata": {
                "points": "141,172 169,172 169,112 196.99999904632568,112"
            },
            "src": {
                "port": "out",
                "process": "wiretap1"
            },
            "tgt": {
                "port": "inData",
                "process": "python3operator1"
            }
        }
    ],
    "inports": {},
    "outports": {},
    "metadata": {
        "generation": 1
    }
}