{
    "properties": {},
    "description": "Upload data in mySQL through Data Generator",
    "processes": {
        "python3operator1": {
            "component": "com.sap.system.python3Operator",
            "metadata": {
                "label": "Python3 Operator",
                "x": 176,
                "y": 196,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {
                    "script": "import pandas as pd\nimport io \ndef on_input(File):\n  #  query =  \"CREATE TABLE ztest_di (  C0 varchar(255) NOT NULL, C1 varchar(255) NOT NULL, C2 varchar(255) NOT NULL,  C3 varchar(255) NOT NULL )\"\n\n    #Read data to DataFrame\n    data_stream = io.StringIO(File)\n    df = pd.read_csv(data_stream)\n    \n    #first element will be header and last element will be blank so not considering them when we conver Dataframe to csv\n    df_1=df.to_csv(index=False).split('\\n')[1:-1]\n    \n    #getting the column count for each file given\n    column_count=int(len(str(df_1).split(','))/len(df_1))\n    \n    #generating data in necessary format\n    data=''\n    final_data=[]\n    final_data1=[]\n    for row in range(0,len(df_1)):\n        for value in range(0,column_count):\n            if value == 0:\n                data=(str(df_1[row]).split(',')[value])\n                data='('+data\n                final_data.append(data)\n            elif value == (column_count-1):\n                data=(str(df_1[row]).split(',')[value])\n                data=data+')'\n                final_data.append(data)\n            else:\n                data=(str(df_1[row]).split(',')[value])\n                final_data.append(data)\n    final_data=str(final_data).replace(\"'(\",\"('\").replace(\")'\",\"')\")   \n    final_data1.append(final_data)\n                \n    #concatenate all the records into insert query\n    insert_query = 'insert into DEVICE_DETAIL values '+','.join(final_data1)\n    insert_query=insert_query.replace('[','').replace(']','')\n    \n    api.send(\"out\", insert_query)\n\napi.set_port_callback(\"File\", on_input)\n\n"
                },
                "additionalinports": [
                    {
                        "name": "File",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "out",
                        "type": "string"
                    }
                ]
            }
        },
        "flowagentsqlexecutor1": {
            "component": "com.sap.dh.ds.sql.executor",
            "metadata": {
                "label": "Flowagent SQL Executor",
                "x": 361,
                "y": 196,
                "height": 80,
                "width": 120,
                "extensible": false,
                "generation": 1,
                "config": {
                    "service": "MySQL",
                    "mysqlConnection": {
                        "configurationType": "Configuration Manager",
                        "connectionID": "AURORA_DB"
                    },
                    "separator": ";"
                }
            }
        },
        "graphterminator1": {
            "component": "com.sap.util.graphTerminator",
            "metadata": {
                "label": "Graph Terminator",
                "x": 542,
                "y": 196,
                "height": 80,
                "width": 120,
                "generation": 1,
                "config": {},
                "additionalinports": [
                    {
                        "name": "input2",
                        "type": "string"
                    }
                ]
            }
        },
        "workflowtrigger1": {
            "component": "com.sap.dh.trigger",
            "metadata": {
                "label": "Workflow Trigger",
                "x": -86,
                "y": 82,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {}
            }
        },
        "constantgenerator1": {
            "component": "com.sap.util.constantGenerator",
            "metadata": {
                "label": "Constant Generator",
                "x": 71,
                "y": 82,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {
                    "counter": 1,
                    "content": "100"
                }
            }
        },
        "javascriptv2operator1": {
            "component": "com.sap.system.jsengine.v2",
            "metadata": {
                "label": "Javascript(v2) Operator",
                "x": 237,
                "y": 82,
                "height": 80,
                "width": 120,
                "extensible": true,
                "generation": 1,
                "config": {
                    "script": "// This operator is needed to keep compatibility to the old datagenerator\n$.setPortCallback(\"input1\",doTick);\nvar counter = 0;\n\ngetRandom = function(min, max) {\n    return Math.random() * (max - min) + min;\n};\n\ngetRandomInt = function(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nvar payload = ''\ngenerateData = function(ctr) {\n\n    // payload = \"3,26.4,60.9,532.0,1.0,24.0,55.0,0,657.0,437.0,1388,5,-33,3.33\"\n    while(counter <= ctr){\n        payload += getRandomInt(2, 6) + \",\"; // DeviceID\n        payload += getRandom(25, 26) + \",\"; // Temperatur\n        payload += getRandom(40, 60) + \",\"; // Humidity\n        payload += getRandom(500, 600) + \",\"; // CO2    \n        payload += getRandom(0.9, 1.1) + \",\"; // CO    \n        payload += getRandom(23, 25) + \",\"; // LPG    \n        payload += getRandom(50, 60) + \",\"; // Smoke  \n        payload += getRandomInt(0, 1) + \",\"; // Presence \n        payload += getRandom(600, 800) + \",\"; // Light  \n        payload += getRandom(400, 500) + \"\\r\\n\"; // Sound  \n        counter++;\n    }\n    return payload;\n};\n\n// $.addTimer(\"500ms\",doTick);\n\nfunction doTick(ctx,s) {\n    var result = generateData(s);\n    $.output(result);\n}\n// your script goes in here\n\n\n\n"
                },
                "additionalinports": [
                    {
                        "name": "input1",
                        "type": "string"
                    }
                ],
                "additionaloutports": [
                    {
                        "name": "output",
                        "type": "string"
                    }
                ]
            }
        }
    },
    "groups": [],
    "connections": [
        {
            "metadata": {
                "points": "38,122 66,122"
            },
            "src": {
                "port": "output",
                "process": "workflowtrigger1"
            },
            "tgt": {
                "port": "in",
                "process": "constantgenerator1"
            }
        },
        {
            "metadata": {
                "points": "195,122 232,122"
            },
            "src": {
                "port": "out",
                "process": "constantgenerator1"
            },
            "tgt": {
                "port": "input1",
                "process": "javascriptv2operator1"
            }
        },
        {
            "metadata": {
                "points": "300,236 328,236 328,262 356,262"
            },
            "src": {
                "port": "out",
                "process": "python3operator1"
            },
            "tgt": {
                "port": "sql",
                "process": "flowagentsqlexecutor1"
            }
        },
        {
            "metadata": {
                "points": "485,227 511,227 511,245 537,245"
            },
            "src": {
                "port": "result",
                "process": "flowagentsqlexecutor1"
            },
            "tgt": {
                "port": "input2",
                "process": "graphterminator1"
            }
        },
        {
            "metadata": {
                "points": "361,122 411,122 411,179 121,179 121,236 171,236"
            },
            "src": {
                "port": "output",
                "process": "javascriptv2operator1"
            },
            "tgt": {
                "port": "File",
                "process": "python3operator1"
            }
        }
    ],
    "inports": {},
    "outports": {},
    "metadata": {}
}